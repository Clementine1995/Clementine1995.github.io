(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{388:function(s,t,a){"use strict";a.r(t);var e=a(42),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"css-shapes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-shapes"}},[s._v("#")]),s._v(" CSS shapes")]),s._v(" "),a("blockquote",[a("p",[s._v("文章参考自"),a("a",{attrs:{href:"http://www.w3cplus.com/css3/css-shapes-101.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("CSS Shapes 101"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("文章参考自"),a("a",{attrs:{href:"https://juejin.im/post/5aaf9bf2f265da239f072eb6",target:"_blank",rel:"noopener noreferrer"}},[s._v("shapes 创建炫酷的内容流"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"css-shapes介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#css-shapes介绍"}},[s._v("#")]),s._v(" CSS shapes介绍")]),s._v(" "),a("p",[s._v("div套div，这是我们网页布局一直使用的一种方式。通过使用CSS，我们一直试图摆脱这种创建几何形状的限制，但这些形状没有影响形状内的内容，或者与页面其他元素相互影响。由Adobe在2012年中期提出的新的CSS shapes 规范 改变了这一现状。它的目标是为web设计人员提供一种新的方式，来使内容流入或者环绕在任意复杂的形状上著作权归作者所有。简单来说，它赋予了我们一种更为自由的图文混排的能力。")]),s._v(" "),a("h2",{attrs:{id:"shape-outside"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shape-outside"}},[s._v("#")]),s._v(" shape-outside")]),s._v(" "),a("p",[s._v("这个属性定义了一个行内内容应该包裹的形状，默认值是margin-box")]),s._v(" "),a("h3",{attrs:{id:"关键字值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字值"}},[s._v("#")]),s._v(" 关键字值")]),s._v(" "),a("ol",[a("li",[s._v("margin-box   // 形状包含元素的margin值  content + margin")]),s._v(" "),a("li",[s._v("padding-box  // 形状包含padding值 content + padding")]),s._v(" "),a("li",[s._v("content-box  // 形状就是元素本身的值 content")]),s._v(" "),a("li",[s._v("border-box   // 形状包含元素的border值  content + border")]),s._v(" "),a("li",[s._v("none         // 不设置")])]),s._v(" "),a("h3",{attrs:{id:"函数值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数值"}},[s._v("#")]),s._v(" 函数值")]),s._v(" "),a("p",[s._v("形状可以通过以下的函数来创建:")]),s._v(" "),a("ol",[a("li",[s._v("circle()")]),s._v(" "),a("li",[s._v("ellipse()")]),s._v(" "),a("li",[s._v("inset()")]),s._v(" "),a("li",[s._v("polygon()")])]),s._v(" "),a("p",[s._v("每一个形状是都是由一组点定义的。有些函数把点作为参数,另外一些则采用偏移量--最终他们都会在元素上绘制一个由一组点组成的形状。形状也可以经由从图像中提取的alpha通道来定位。当一个图像传递给形状属性时,浏览器将基于"),a("code",[s._v("shape-image-threshold")]),s._v("属性来提取图像的形状。图像必须是CORS兼容的。如果提供的图片因任何理由不能显示 (例如图片不存在),元素不会被应用任何的形状。")]),s._v(" "),a("p",[s._v("以下的形状属性,接受上面的函数做为值:")]),s._v(" "),a("ul",[a("li",[s._v("shape-outside:在一个形状(外)包裹内容")]),s._v(" "),a("li",[s._v("shape-inside:在一个形状内包裹内容")])]),s._v(" "),a("p",[s._v("可以使用"),a("code",[s._v("shape-outside")]),s._v("属性结合"),a("code",[s._v("shape-margin")]),s._v("属性添加一个带有边距的形状,从而将内容推离形状，以便在形状和内容之间创造更多的空间。同样我们也可以把"),a("code",[s._v("shape-inside")]),s._v("跟"),a("code",[s._v("shape-padding")]),s._v("属性相配合,来增加文字跟形状的距离。")]),s._v(" "),a("p",[s._v("可以简单的添加一行CSS，来使用形状属性和函数来声明一个元素上的形状:")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".element")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-outside")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("circle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* content will flow around the circle defined on the element */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果你把这条CSS应用到元素上,形状不会应用到元素上,除非满足两个条件:")]),s._v(" "),a("ul",[a("li",[s._v("元素必须是浮动状态的。下一级别的css shapes可能会允许我们在未浮动元素上定义形状，但不是现在。")]),s._v(" "),a("li",[s._v("元素必须包含维度。给元素设置好高度和宽度即可给元素建立一个维度坐标系。")])]),s._v(" "),a("h4",{attrs:{id:"circle"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#circle"}},[s._v("#")]),s._v(" circle()")]),s._v(" "),a("p",[s._v("语法："),a("code",[s._v("circle() = circle( [<shape-radius>]? [at <position>]? )")])]),s._v(" "),a("p",[s._v("问号表示，这些参数是可选的，可以省略。默认radius为元素的宽度的一半，x和y的坐标是50%，也就是元素的中间，x和y可以是百分比也可以是具体数值。也就是说将默认为一个圆心在元素中心的的圆。通过更改x和y的左标,可以更改圆心的位置，但是并不更改元素的实际大小。")]),s._v(" "),a("p",[s._v("你可以使用任何单位指定圆的半径长度 (px,em,pt等)。还可以使用closest-side或furthest-side来指定半径，默认为closest-side，这意味着浏览器将使用从元素的中心到距离最近的边缘的长度作为半径。farthest-side使用从中心到最远的边缘的长度作为半径。")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-outside")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("circle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("farthest-side at 25% 25%"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* defines a circle whose radius is half the length of the longest side, positioned at the point of coordinates 25% 25% on the element’s coordinate system*/")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-inside")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("circle")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("250px at 500px 300px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* defines a circle whose center is positioned at 500px horizontally and 300px vertically, with a radius of 250px */")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("效果图来自w3cplus：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/shape-7.jpg",alt:"效果图1"}})]),s._v(" "),a("h4",{attrs:{id:"ellipse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ellipse"}},[s._v("#")]),s._v(" ellipse()")]),s._v(" "),a("p",[s._v("语法："),a("code",[s._v("ellipse() = ellipse( [<shape-radius>{2}]? [at <position>]? )")])]),s._v(" "),a("p",[s._v("用来创建一个椭圆形区域，第一个是水平方向半径，第二个是垂直方向半径，函数类似circle()函数，具有相同的参数列表。如果只是设置ellipse()，水平、垂直方向半径均为元素的一半，x、y也都是50%，也就是元素中心上自己大小的正圆，如果元素不是正方形，两个半径就各是元素宽高的一半，水平对应宽而垂直对应高。")]),s._v(" "),a("h4",{attrs:{id:"inset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inset"}},[s._v("#")]),s._v(" inset()")]),s._v(" "),a("p",[s._v("语法："),a("code",[s._v("inset() = inset( offset{1,4} [round <border-radius>]? )")])]),s._v(" "),a("p",[s._v("inset()函数接受一个到四个偏移值,指定相对于参考盒的偏移量。定义矩形的位置与margin和padding一样都是"),a("code",[s._v("top right bottom left")]),s._v("，如"),a("code",[s._v("inset(25px 53px 50px 30px)")]),s._v("，一个数值的时候可以理解为所有方向的缩放， 如"),a("code",[s._v("inset(10%)")]),s._v("，设置矩形的border-radius，使用round关键字 如inset(10% round 50%)，也可以分开来设置每个方向的圆角，这和border-radius的语法一致， 如inset(10% round 50px 20px 40px 0)。")]),s._v(" "),a("h4",{attrs:{id:"polygon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#polygon"}},[s._v("#")]),s._v(" polygon()")]),s._v(" "),a("p",[s._v("语法："),a("code",[s._v("polygon(<position>{3,n})")])]),s._v(" "),a("p",[s._v("定义多边形，语法为polygon(x1 y1, x2 y2, x3 y3),设置多个点的坐标来定义多边形，坐标可以是具体数值和百分比，并且开始与结束必须是一个闭合的路径。很多情况下形状会跟clip-path一起使用。多边形polygon()函数也接受一个可选的关键词作为参数,可以是nonzero或evenodd。这指定当多边形内部出现相交时，如何确认是否为多边形的内部区域。")]),s._v(" "),a("h3",{attrs:{id:"url值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url值"}},[s._v("#")]),s._v(" url值")]),s._v(" "),a("p",[s._v("还可以使用透明的PNG图片创建形状，语法如下")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-outside")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bg.png"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  // 背景图\n"),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-image-threshold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(".5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  // 用来设置不透明度  [0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("1] 1为不透明 0为完全透明\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("我们将用下面的图像定义一个形状，并用文字包裹起来:")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/shape-11.jpg",alt:"CSS Shapes 101"}})]),s._v(" "),a("p",[s._v("使用shape-outside的url()值来指向这张图片,我们可以用这个属性来让内容围成树叶的形状。")]),s._v(" "),a("div",{staticClass:"language-css line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-css"}},[a("code",[a("span",{pre:!0,attrs:{class:"token selector"}},[s._v(".leaf-shaped-element")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("width")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 400px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("height")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 400px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-outside")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("leaf.png"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-margin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 15px"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("shape-image-threshold")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" 0.5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("background")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" #009966 "),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("path/to/background-image.jpg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[s._v("mask-image")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token url"}},[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("leaf.png"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("当然,如果你要把叶子形状作为元素背景,那图像中形状之外的需要被裁减掉。你可以使用mask-image属性(用适当的前缀)做到这一点,因为clip-path属性并不能接收一个alpha图片作为值。结果如下所示:")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://www.w3cplus.com/sites/default/files/styles/print_image/public/blogs/2014/1405/shape-12.jpg",alt:"CSS Shapes 101"}})]),s._v(" "),a("h2",{attrs:{id:"shape-margin"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shape-margin"}},[s._v("#")]),s._v(" shape-margin")]),s._v(" "),a("p",[s._v("shape-margin，它是用来给浮动区域添加空白区域，可以使用px、rem、em等单位。")])])}),[],!1,null,null,null);t.default=n.exports}}]);