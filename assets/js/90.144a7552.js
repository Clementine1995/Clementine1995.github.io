(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{438:function(t,a,r){"use strict";r.r(a);var e=r(42),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"特别数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#特别数组"}},[t._v("#")]),t._v(" 特别数组")]),t._v(" "),r("h2",{attrs:{id:"arraybuffer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer"}},[t._v("#")]),t._v(" ArrayBuffer")]),t._v(" "),r("p",[t._v("ArrayBuffer 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer 不能直接操作，而是要通过 TypedArray 类型数组对象或 DataView 对象来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。")]),t._v(" "),r("p",[t._v("语法："),r("code",[t._v("new ArrayBuffer(length)")])]),t._v(" "),r("p",[t._v("参数：")]),t._v(" "),r("p",[t._v("length：要创建的 ArrayBuffer 的大小，单位为字节。")]),t._v(" "),r("p",[t._v("返回值：")]),t._v(" "),r("p",[t._v("一个指定大小的 ArrayBuffer 对象，其内容被初始化为 0。")]),t._v(" "),r("p",[t._v("异常：")]),t._v(" "),r("p",[t._v("如果 length 大于 Number.MAX_SAFE_INTEGER（>= 2 ** 53）或为负数，则抛出一个  RangeError  异常。")]),t._v(" "),r("p",[t._v("注意：从 ECMAScript 2015 开始，ArrayBuffer 对象需要用 new 运算符创建。")]),t._v(" "),r("h3",{attrs:{id:"以现有数据获取-arraybuffer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#以现有数据获取-arraybuffer"}},[t._v("#")]),t._v(" 以现有数据获取 ArrayBuffer")]),t._v(" "),r("ul",[r("li",[t._v("从 Base64 字符串：主要是 base64DecToArr 方法")]),t._v(" "),r("li",[t._v("从本地文件：主要是 FileReader.readAsArrayBuffer() 这个方法")])]),t._v(" "),r("h3",{attrs:{id:"arraybuffer属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer属性"}},[t._v("#")]),t._v(" ArrayBuffer属性")]),t._v(" "),r("p",[t._v("ArrayBuffer.length")]),t._v(" "),r("p",[t._v("ArrayBuffer 构造函数的 length 属性，其值为1。")]),t._v(" "),r("p",[t._v("get ArrayBuffer[@@species]")]),t._v(" "),r("p",[t._v("返回 ArrayBuffer 的构造函数。")]),t._v(" "),r("h3",{attrs:{id:"arraybuffer方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraybuffer方法"}},[t._v("#")]),t._v(" ArrayBuffer方法")]),t._v(" "),r("p",[t._v("ArrayBuffer.isView(arg)")]),t._v(" "),r("p",[t._v("如果参数是 ArrayBuffer 的视图实例则返回 true，例如 类型数组对象 或 DataView 对象；否则返回 false。")]),t._v(" "),r("p",[t._v("ArrayBuffer.transfer(oldBuffer [, newByteLength])")]),t._v(" "),r("p",[t._v("返回一个新的 ArrayBuffer 对象，其内容取自 oldBuffer 中的数据，并且根据 newByteLength 的大小对数据进行截取或补 0。")]),t._v(" "),r("p",[t._v("ArrayBuffer.slice()")]),t._v(" "),r("p",[t._v("slice()方法返回一个新的 ArrayBuffer ，它的内容是这个ArrayBuffer的字节副本，从begin（包括），到end（不包括）。")]),t._v(" "),r("h2",{attrs:{id:"dataview-数据视图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dataview-数据视图"}},[t._v("#")]),t._v(" DataView(数据视图)")]),t._v(" "),r("p",[t._v("DataView 视图是一个可以从 ArrayBuffer 对象中读写多种数值类型的底层接口，使用它时，不用考虑不同平台的字节序问题。")]),t._v(" "),r("h3",{attrs:{id:"dataview语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dataview语法"}},[t._v("#")]),t._v(" DataView语法")]),t._v(" "),r("p",[t._v("语法："),r("code",[t._v("new DataView(buffer [, byteOffset [, byteLength]])")])]),t._v(" "),r("p",[t._v("参数：")]),t._v(" "),r("ul",[r("li",[t._v("buffer：一个 ArrayBuffer 或 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",target:"_blank",rel:"noopener noreferrer"}},[t._v("SharedArrayBuffer"),r("OutboundLink")],1),t._v(" 对象，DataView 对象的数据源。")]),t._v(" "),r("li",[t._v("byteOffset：可选，此 DataView 对象的第一个字节在 buffer 中的偏移。如果不指定则默认从第一个字节开始。")]),t._v(" "),r("li",[t._v("byteLength 可选：此 DataView 对象的字节长度。如果不指定则默认与 buffer 的长度相同。")])]),t._v(" "),r("p",[t._v("返回值：")]),t._v(" "),r("p",[t._v("一个 DataView 对象用来呈现指定的缓存区数据。你可以认为返回的对象是一个二进制的解释器——它知道在读写的时候如何正确的转化字节码。")]),t._v(" "),r("p",[t._v("异常：")]),t._v(" "),r("p",[t._v("RangeError：如果由偏移（byteOffset）和字节长度（byteLength）计算得到的结束位置超出了 buffer 的长度，抛出此异常。")]),t._v(" "),r("h3",{attrs:{id:"dataview属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dataview属性"}},[t._v("#")]),t._v(" DataView属性")]),t._v(" "),r("p",[t._v("所有 DataView 实例都继承自 DataView.prototype并且允许向 DataView 对象中添加额外属性。")]),t._v(" "),r("ul",[r("li",[t._v("DataView.prototype.constructor：指定用来生成原型的构造函数.初始化值是标准内置DataView构造器.")]),t._v(" "),r("li",[t._v("DataView.prototype.buffer：只读，被视图引入的ArrayBuffer.创建实例的时候已固化因此是只读的.")]),t._v(" "),r("li",[t._v("DataView.prototype.byteLength：只读，从 ArrayBuffer中读取的字节长度. 创建实例的时候已固化因此是只读的.")]),t._v(" "),r("li",[t._v("DataView.prototype.byteOffset：只读，从 ArrayBuffer读取时的偏移字节长度. 创建实例的时候已固化因此是只读的.")])]),t._v(" "),r("h3",{attrs:{id:"dataview方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#dataview方法"}},[t._v("#")]),t._v(" DataView方法")]),t._v(" "),r("p",[t._v("DataView 的方法分为了读写两种，相互对应，下面每一个方法都有对应的set方法：")]),t._v(" "),r("ul",[r("li",[t._v("DataView.prototype.getInt8()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个8-bit数(一个字节).")]),t._v(" "),r("li",[t._v("DataView.prototype.getUint8()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个8-bit数(无符号字节).")]),t._v(" "),r("li",[t._v("DataView.prototype.getInt16()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个16-bit数(短整型).")]),t._v(" "),r("li",[t._v("DataView.prototype.getUint16()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个16-bit数(无符号短整型).")]),t._v(" "),r("li",[t._v("DataView.prototype.getInt32()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(长整型).")]),t._v(" "),r("li",[t._v("DataView.prototype.getUint32()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(无符号长整型).")]),t._v(" "),r("li",[t._v("DataView.prototype.getFloat32()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个32-bit数(浮点型).")]),t._v(" "),r("li",[t._v("DataView.prototype.getFloat64()：从DataView起始位置以byte为计数的指定偏移量(byteOffset)处获取一个64-bit数(双精度浮点型).")])]),t._v(" "),r("h2",{attrs:{id:"typedarray"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray"}},[t._v("#")]),t._v(" TypedArray")]),t._v(" "),r("p",[t._v("一个TypedArray 对象描述一个底层的二进制数据缓存区的一个类似数组(array-like)视图。事实上，没有名为 TypedArray的全局对象，也没有一个名为的 TypedArray构造函数。相反，有许多不同的全局对象，下面会列出这些针对特定元素类型的类型化数组的构造函数。")]),t._v(" "),r("h3",{attrs:{id:"typedarray语法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray语法"}},[t._v("#")]),t._v(" TypedArray语法")]),t._v(" "),r("div",{staticClass:"language-js line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ES2017中新增")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("typedArray"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("object"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TypedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" byteOffset "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("TypedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("指的是以下的其中之一：\n\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Int8Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint8Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint8ClampedArray")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Int16Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint16Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Int32Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Uint32Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Float32Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("Float64Array")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br")])]),r("p",[t._v("参数:")]),t._v(" "),r("ul",[r("li",[t._v("length：当传入length参数时，一个内部数组缓冲区会被创建在内存中。该缓存区的大小是传入的length乘以数组中每个元素的字节数（BYTES_PER_ELEMENT），每个元素的值都为0。")]),t._v(" "),r("li",[t._v("typedArray：当传入一个包含任意类型元素的任意类型化数组对象typedArray（比如Int32Array）作为参数时，typedArray被复制到一个新的类型数组。typedArray中的每个值会在复制到新的数组之前根据构造器进行转化。新的生成的类型化数组对象将会有跟传入的数组相同的长度")]),t._v(" "),r("li",[t._v("object：当传入一个 object作为参数时，如同通过 TypedArray.from() 方法一样创建一个新的类型数组。")]),t._v(" "),r("li",[t._v("buffer, byteOffset, length：当传入一个buffer参数，或者再另外加上可选参数byteOffset和length时，一个新的类型化数组视图将会被创建并可用于呈现传入的ArrayBuffer实例。byteOffset和length指定类型化数组视图暴露的内存范围，如果两者都未传入，那么整个buffer都会被呈现。如果仅仅忽略length，那么buffer中偏移byteOffset后剩下的buffer将会被呈现。")])]),t._v(" "),r("p",[t._v("当创建一个TypedArray实例（例如:Int8Array）时，一个数组缓冲区将被创建在内存中，如果ArrayBuffer对象被当作参数传给构造函数将使用传入的ArrayBuffer代替。缓冲区的地址被存储在实例的内部属性中，所有的%TypedArray%.prototype上的方法例如set value和get value等都会操作在数组缓冲区上。")]),t._v(" "),r("h3",{attrs:{id:"typedarray属性访问"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray属性访问"}},[t._v("#")]),t._v(" TypedArray属性访问")]),t._v(" "),r("p",[t._v("你可以参考使用标准数组索引数组中的元素的方法(其实就是方括号里面写下标).然而,原型链上面定义的索引属性(译者注:即用数字作为属性,例如Int16Array.prototype[0]=12;),在实例化的对象上面是获取不到该属性的(int16Array[0]==undefined).通过查询 ArrayBuffer 是找不到索引属性的.但您仍然可以使用命名属性(译者注:就是键不是数字的),就像所有对象一样。")]),t._v(" "),r("h3",{attrs:{id:"typedarray-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-对象"}},[t._v("#")]),t._v(" TypedArray 对象")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("类型")]),t._v(" "),r("th",[t._v("大小（字节单位）")]),t._v(" "),r("th",[t._v("描述")]),t._v(" "),r("th",[t._v("Web IDL type")]),t._v(" "),r("th",[t._v("C语言中的等效类型")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("Int8Array")]),t._v(" "),r("td",[t._v("1")]),t._v(" "),r("td",[t._v("8位二进制带符号整数")]),t._v(" "),r("td",[t._v("-2^7~(2^7) - 1")]),t._v(" "),r("td",[t._v("byte")])]),t._v(" "),r("tr",[r("td",[t._v("Uint8Array")]),t._v(" "),r("td",[t._v("1")]),t._v(" "),r("td",[t._v("8位无符号整数")]),t._v(" "),r("td",[t._v("0~(2^8) - 1")]),t._v(" "),r("td",[t._v("octet")])]),t._v(" "),r("tr",[r("td",[t._v("Int16Array")]),t._v(" "),r("td",[t._v("2")]),t._v(" "),r("td",[t._v("16位二进制带符号整数")]),t._v(" "),r("td",[t._v("-2^15~(2^15)-1")]),t._v(" "),r("td",[t._v("short")])]),t._v(" "),r("tr",[r("td",[t._v("Uint16Array")]),t._v(" "),r("td",[t._v("2、16位无符号整数")]),t._v(" "),r("td",[t._v("0~(2^16) - 1")]),t._v(" "),r("td",[t._v("unsigned short")]),t._v(" "),r("td",[t._v("uint16_t")])]),t._v(" "),r("tr",[r("td",[t._v("Int32Array")]),t._v(" "),r("td",[t._v("4")]),t._v(" "),r("td",[t._v("32位二进制带符号整数")]),t._v(" "),r("td",[t._v("-2^31~(2^31)-1")]),t._v(" "),r("td",[t._v("long")])]),t._v(" "),r("tr",[r("td",[t._v("Uint32Array")]),t._v(" "),r("td",[t._v("4")]),t._v(" "),r("td",[t._v("32位无符号整数")]),t._v(" "),r("td",[t._v("0~(2^32) - 1")]),t._v(" "),r("td",[t._v("unsigned int")])]),t._v(" "),r("tr",[r("td",[t._v("Float32Array")]),t._v(" "),r("td",[t._v("4")]),t._v(" "),r("td",[t._v("32位IEEE浮点数")]),t._v(" "),r("td",[t._v("unrestricted float")]),t._v(" "),r("td",[t._v("float")])]),t._v(" "),r("tr",[r("td",[t._v("Float64Array")]),t._v(" "),r("td",[t._v("8")]),t._v(" "),r("td",[t._v("64位IEEE浮点数")]),t._v(" "),r("td",[t._v("unrestricted")]),t._v(" "),r("td",[t._v("ouble")])])])]),t._v(" "),r("h3",{attrs:{id:"typedarray属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray属性"}},[t._v("#")]),t._v(" TypedArray属性")]),t._v(" "),r("ul",[r("li",[t._v("TypedArray.BYTES_PER_ELEMENT：返回不同类型的数组对象的元素大小的数字值。")]),t._v(" "),r("li",[t._v("TypedArray.length：Length property whose value is 3.(译者注:应该是数组的长度吧???)")]),t._v(" "),r("li",[t._v('TypedArray.name：返回构造器的名称,例如"Int8Array".')]),t._v(" "),r("li",[t._v("get TypedArray[@@species]：用于创建派生对象的构造函数函数.")]),t._v(" "),r("li",[t._v("TypedArray.prototype：TypedArray的原型.")])]),t._v(" "),r("h3",{attrs:{id:"typedarray方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray方法"}},[t._v("#")]),t._v(" TypedArray方法")]),t._v(" "),r("ul",[r("li",[t._v("TypedArray.from()")]),t._v(" "),r("li",[t._v("TypedArray.of()")])]),t._v(" "),r("h3",{attrs:{id:"typedarray-原型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#typedarray-原型"}},[t._v("#")]),t._v(" TypedArray 原型")]),t._v(" "),r("p",[t._v("所有的类型化数组都是继承自TypedArray.prototype.")]),t._v(" "),r("p",[t._v("属性：")]),t._v(" "),r("ul",[r("li",[t._v("TypedArray.prototype.constructor：返回创建实例原型的构造函数.这是相应的typed array type的默认的构造函数.")]),t._v(" "),r("li",[t._v("TypedArray.prototype.buffer：只读，返回被格式化数组引用的ArrayBuffer. 创建时已被固化,因此是只读的.")]),t._v(" "),r("li",[t._v("TypedArray.prototype.byteLength：只读，返回从ArrayBuffer读取的字节长度. 创建时已被固化,因此是只读的.\nTypedArray.prototype.byteOffset：只读，返回从ArrayBuffer读取时的字节偏移量.创建时已被固化,因此是只读的.\nTypedArray.prototype.length：只读，返回在类型化数组中的元素的数量.创建时已被固化,因此是只读的.")])]),t._v(" "),r("p",[t._v("其原型上的方法与普通数组类似")])])}),[],!1,null,null,null);a.default=s.exports}}]);