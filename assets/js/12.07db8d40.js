(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{360:function(n,t,s){"use strict";s.r(t);var a=s(42),e=Object(a.a)({},(function(){var n=this,t=n.$createElement,s=n._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("h1",{attrs:{id:"nginx服务启动、停止、重启"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx服务启动、停止、重启"}},[n._v("#")]),n._v(" Nginx服务启动、停止、重启")]),n._v(" "),s("p",[n._v("经过前3节的学习，已经安装好了nginx，在维护的时候，我们作的最多的操作就是Nginx的启动、重启和停止。这节课我们就把Nginx的这些最常用操作讲一下。")]),n._v(" "),s("h2",{attrs:{id:"启动nginx服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动nginx服务"}},[n._v("#")]),n._v(" 启动Nginx服务")]),n._v(" "),s("p",[n._v("默认的情况下，Nginx是不会自动启动的，需要我们手动进行启动，当然启动Nginx的方法也不是单一的。")]),n._v(" "),s("h3",{attrs:{id:"nginx直接启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx直接启动"}},[n._v("#")]),n._v(" nginx直接启动")]),n._v(" "),s("p",[n._v("在CentOS7.4版本里（低版本是不行的），是可以直接直接使用nginx启动服务的。")]),n._v(" "),s("div",{staticClass:"language-(shell) line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("nginx\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("h3",{attrs:{id:"使用systemctl命令启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用systemctl命令启动"}},[n._v("#")]),n._v(" 使用systemctl命令启动")]),n._v(" "),s("p",[n._v("还可以使用个Linux的命令进行启动，我一般都是采用这种方法进行使用。因为这种方法无论启动什么服务，都是一样的，只是换一下服务的名字（不用增加额外的记忆点）。")]),n._v(" "),s("p",[n._v("systemctl start nginx.service\n输入命令后，没有任何提示，那我们如何知道Nginx服务已经启动了哪？可以使用Linux的组合命令，进行查询服务的运行状况。")]),n._v(" "),s("div",{staticClass:"language-() line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("ps aux | grep nginx\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br")])]),s("p",[n._v("如果启动成功会出现如下中类似的结果。\nroot xxxxx 0.0 0.0 xxxxx ... nginx:master process nginx\nnginx ...\nroot ...\n有这三条记录，说明我们Nginx被正常开启了。")]),n._v(" "),s("h2",{attrs:{id:"停止nginx服务的四种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#停止nginx服务的四种方法"}},[n._v("#")]),n._v(" 停止Nginx服务的四种方法")]),n._v(" "),s("p",[n._v("1.立即停止服务"),s("code",[n._v("nginx -s stop")]),n._v("\n2.从容停止服务"),s("code",[n._v("nginx -s quit")]),n._v("\n3.killall 方法杀死进程"),s("code",[n._v("killall nginx")]),n._v("\n4.systemctl 停止"),s("code",[n._v("systemctl stop nginx.service")])]),n._v(" "),s("h2",{attrs:{id:"重启nginx服务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重启nginx服务"}},[n._v("#")]),n._v(" 重启Nginx服务")]),n._v(" "),s("p",[n._v("有时候我们需要重启Nginx服务，这时候可以使用下面的命令。"),s("code",[n._v("systemctl restart nginx.service")])]),n._v(" "),s("h2",{attrs:{id:"重新载入配置文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重新载入配置文件"}},[n._v("#")]),n._v(" 重新载入配置文件")]),n._v(" "),s("p",[n._v("在重新编写或者修改Nginx的配置文件后，都需要作一下重新载入，这时候可以用Nginx给的命令。"),s("code",[n._v("nginx -s reload")])]),n._v(" "),s("h2",{attrs:{id:"查看端口号"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看端口号"}},[n._v("#")]),n._v(" 查看端口号")]),n._v(" "),s("p",[n._v("在默认情况下，Nginx启动后会监听80端口，从而提供HTTP访问，如果80端口已经被占用则会启动失败。我么可以使用"),s("code",[n._v("netstat -tlnp")]),n._v("命令查看端口号的占用情况。")])])}),[],!1,null,null,null);t.default=e.exports}}]);