(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{430:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"冴羽js深入系列学习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#冴羽js深入系列学习"}},[t._v("#")]),t._v(" 冴羽JS深入系列学习")]),t._v(" "),a("p",[t._v("主要记录冴羽博客中JS深入系列阅读后的关键点记录与总结")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("冴羽的博客"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("扩展阅读"),a("a",{attrs:{href:"https://www.cnblogs.com/TomXu/tag/JavaScript/default.html?page=1",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解JavaScript系列"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("ES规范"),a("a",{attrs:{href:"https://tc39.es/ecma262/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ECMAScript® 2021 Language Specification"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"从原型到原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从原型到原型链"}},[t._v("#")]),t._v(" 从原型到原型链")]),t._v(" "),a("h3",{attrs:{id:"prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype"}},[t._v("#")]),t._v(" prototype")]),t._v(" "),a("p",[t._v("每个函数都有一个 prototype 属性，不只是构造函数，而这个 prototype 指向了一个对象，这个对象正是调用该构造函数而创建的实例的原型。")]),t._v(" "),a("p",[t._v("而原型就是每一个JS对象在创建时都会关联的一个对象，每个对象都会从原型上”继承“一些属性。")]),t._v(" "),a("p",[t._v("获得一个对象的原型可以通过这个方法："),a("code",[t._v("Object.getPrototypeOf(obj)")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然写在注释里，但是你要注意：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prototype是函数才会有的属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kevin'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kevin")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Kevin")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h3",{attrs:{id:"proto"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#proto"}},[t._v("#")]),t._v(" "),a("strong",[t._v("proto")])]),t._v(" "),a("p",[t._v("这个是每个对象（实例）都会具有的一个属性（null除外）,而它会指向该对象的原型")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj."),a("strong",[t._v("proto")]),t._v(" 时，可以理解成返回了 Object.getPrototypeOf(obj)。")]),t._v(" "),a("h3",{attrs:{id:"constructor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor"}},[t._v("#")]),t._v(" constructor")]),t._v(" "),a("p",[t._v("实例跟构造函数都可以指向原型，而 constructor 可以指向构造函数，它存在于原型上。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("实例上是没有 constructor 这个属性的，但是通过实例对象却能访问到，是因为下面的原型链。")]),t._v(" "),a("h3",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[t._v("#")]),t._v(" 原型链")]),t._v(" "),a("p",[t._v("原型链其实就是访问对象某个属性时，这个属性的查找顺序。")]),t._v(" "),a("p",[t._v("当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。")]),t._v(" "),a("p",[t._v("一般对象的原型尽头是 Object.prototype ，Object没有原型，null在js是没有对象的意思，所以"),a("code",[t._v("Object.prototype.__proto__ === null")]),t._v("，也可能是在底层设置好的，不然打印可能是undefined或者报错。")]),t._v(" "),a("p",[t._v("注意："),a("strong",[t._v("Function__proto__===Function.prototype")])]),t._v(" "),a("p",[t._v("这个问题 Function 作为构造函数")]),t._v(" "),a("p",[t._v("如果new Function()必然会生成一个函数对象，而所有的生成的函数对象都继承自一个匿名函数对象，所以Function.prototype指向了function anonymous()。")]),t._v(" "),a("p",[t._v("而它作为对象Function就是一个名字叫Function的函数对象，对象继承字一个匿名的函数对象，所以Function."),a("strong",[t._v("proto")]),t._v(" 指向了function anonymous()")]),t._v(" "),a("h3",{attrs:{id:"从原型到原型链补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从原型到原型链补充"}},[t._v("#")]),t._v(" 从原型到原型链补充")]),t._v(" "),a("p",[t._v("instanceof 运算符用来检测 constructor.prototype 是否存在于参数 object 的原型链上。")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://juejin.im/post/5b0b9b9051882515773ae714",target:"_blank",rel:"noopener noreferrer"}},[t._v("浅谈 instanceof 和 typeof 的实现原理"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5d6e5c3d6fb9a06ae0721f5f",target:"_blank",rel:"noopener noreferrer"}},[t._v("一文带你深入剖析 instanceof 运算符"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"词法作用域和动态作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#词法作用域和动态作用域"}},[t._v("#")]),t._v(" 词法作用域和动态作用域")]),t._v(" "),a("p",[t._v("作用域是指程序源代码中定义变量的区域。")]),t._v(" "),a("p",[t._v("作用域规定了如何查找变量，也就是确定当前执行代码对变量的访问权限。")]),t._v(" "),a("p",[t._v("JavaScript 采用词法作用域(lexical scoping)，也就是静态作用域。也就是函数的作用域在函数定义的时候就决定了，动态作用域和静态作用域，决定了是作用域链的顺序。")]),t._v(" "),a("h2",{attrs:{id:"执行上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈"}},[t._v("#")]),t._v(" 执行上下文栈")]),t._v(" "),a("p",[t._v("下面还是ES3中的实现")]),t._v(" "),a("h3",{attrs:{id:"可执行代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可执行代码"}},[t._v("#")]),t._v(" 可执行代码")]),t._v(" "),a("p",[t._v("可执行代码有：全局代码、函数代码、eval代码。")]),t._v(" "),a("p",[t._v('当执行到一个函数的时候，就会进行准备"执行上下文(execution context)"。')]),t._v(" "),a("h3",{attrs:{id:"执行上下文栈相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文栈相关"}},[t._v("#")]),t._v(" 执行上下文栈相关")]),t._v(" "),a("p",[t._v("执行上下文栈来管理众多函数的执行上下文，当 JavaScript 开始要解释执行代码的时候，最先遇到的就是全局代码，所以初始化的时候首先就会向执行上下文栈压入一个全局执行上下文，用 globalContext 表示它，并且只有当整个应用程序结束的时候，ECStack 才会被清空，程序结束之前，ECStack 最底部永远有个 globalContext。")]),t._v(" "),a("p",[t._v("举例来说：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"global scope"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkscope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local scope"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkscope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"global scope"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkscope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" scope "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"local scope"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkscope")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("这两个的区别就是，第一个例子中 checkscope 还未从执行上下文栈中出来的时候，f又被压入了执行上下文栈，而第二个例子，checkscope出栈后，f在被压入。")]),t._v(" "),a("h2",{attrs:{id:"变量对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量对象"}},[t._v("#")]),t._v(" 变量对象")]),t._v(" "),a("p",[t._v("每个执行上下文，都有三个重要属性")]),t._v(" "),a("ul",[a("li",[t._v("变量对象(Variable object，VO)")]),t._v(" "),a("li",[t._v("作用域链(Scope chain)")]),t._v(" "),a("li",[t._v("this")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("executionContextObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'scopeChain'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 变量对象 + 所有父级上下文变量对象 */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'variableObject'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 函数的参数, 内部变量和函数声明 */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'this'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"全局上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#全局上下文"}},[t._v("#")]),t._v(" 全局上下文")]),t._v(" "),a("ul",[a("li",[t._v("可以通过 this 引用，在客户端 JavaScript 中，全局对象就是 Window 对象。")]),t._v(" "),a("li",[t._v("全局对象是由 Object 构造函数实例化的一个对象。")]),t._v(" "),a("li",[t._v("预定义了一大堆函数和属性。")]),t._v(" "),a("li",[t._v("作为全局变量的宿主。")]),t._v(" "),a("li",[t._v("客户端 JavaScript 中，全局对象有 window 属性指向自身。")])]),t._v(" "),a("h3",{attrs:{id:"函数上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数上下文"}},[t._v("#")]),t._v(" 函数上下文")]),t._v(" "),a("p",[t._v("每次调用一个执行上下文(Execution context)都会分为两个阶段.")]),t._v(" "),a("ol",[a("li",[t._v("创建阶段.[当一个函数被调用,但是在执行任何内部代码之前]\n"),a("ol",[a("li",[t._v("创建一个作用域链(Scope chain)")]),t._v(" "),a("li",[t._v("创建变量,函数和函数的调用参数.")]),t._v(" "),a("li",[t._v("确定this的值")])])]),t._v(" "),a("li",[t._v("激活/代码执行阶段:\n"),a("ol",[a("li",[t._v("变量赋值, 函数引用以及代码块的执行.")])])])]),t._v(" "),a("h4",{attrs:{id:"激活-变量对象-ao-vo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#激活-变量对象-ao-vo"}},[t._v("#")]),t._v(" 激活 / 变量对象[AO/VO]")]),t._v(" "),a("blockquote",[a("p",[t._v("额外参考"),a("a",{attrs:{href:"https://pjf.name/blogs/what-is-execution-context-and-stack-in-javascript.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS的执行上下文和堆栈详解"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("当一个函数在被调用但是真正执行之前, 会创建上面说的executionContextObj. 这是第一步, 创建阶段. 此时, 解释器通过扫描函数的参数或者传入的参数, 内部函数的定义和变量的声明来创建这个对象(executionContextObj)。")]),t._v(" "),a("ol",[a("li",[t._v("找到调用这个函数的所有代码")]),t._v(" "),a("li",[t._v("在执行函数之前, 创建执行上下文(execution context)")]),t._v(" "),a("li",[t._v("进入创建阶段:\n"),a("ol",[a("li",[t._v("初始化作用域链(scope chain)")]),t._v(" "),a("li",[t._v("创建变量对象\n"),a("ol",[a("li",[t._v("创建参数对象,检查参数的上下文,初始化其名称和值并创建一个副本.\n"),a("ol",[a("li",[t._v("调用函数时，会为其创建一个Arguments对象，并自动初始化局部变量arguments，指代该Arguments对象。所有作为参数传入的值都会成为Arguments对象的数组元素。")])])]),t._v(" "),a("li",[t._v("扫描上下文中所有的函数声明\n"),a("ol",[a("li",[t._v("每个函数被找到的时候, 在variable object中创建一个对应函数名称的属性, 其值是一内存中指向该函数的指针引用.")]),t._v(" "),a("li",[t._v("如果这个函数已经存在,该指针引用会被覆盖.")])])]),t._v(" "),a("li",[t._v("扫描上下文中所有变量的声明\n"),a("ol",[a("li",[t._v("当一个变量被找到的时候, 在variable object中创建其对应变量名的属性, 并将其值初始化为undefined")]),t._v(" "),a("li",[t._v("如果这个变量名的key已经存在于variable object中时, 跳过本次扫描.")])])]),t._v(" "),a("li",[t._v("确定this在上下文中的值")])])])])]),t._v(" "),a("li",[t._v("激活/代码执行阶段\n"),a("ol",[a("li",[t._v("解释器逐行执行函数内的代码, 变量也在此时被赋值")])])])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ul",[a("li",[t._v("函数声明出现在代码块中，javascript 引擎不会将其作为函数声明处理，而是处理成函数表达式。\n"),a("ul",[a("li",[t._v("允许在块级作用域内声明函数。")]),t._v(" "),a("li",[t._v("函数声明类似于var，即会提升到全局作用域或函数作用域的头部。")]),t._v(" "),a("li",[t._v("同时，函数声明还会提升到所在的块级作用域的头部。")])])]),t._v(" "),a("li",[t._v("函数中的变量如果没有通过 var 关键字或者其他 let, const 声明，不会被存放在 AO 中。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("发生了下面的事情：")]),t._v(" "),a("ol",[a("li",[t._v("因为代码块中有函数声明，所以块外块内有两个变量 a，即使块外不写var a，依然会存在一个")]),t._v(" "),a("li",[t._v("块内函数声明提升，并赋值给块内的a")]),t._v(" "),a("li",[t._v("块内 a = 5 时，覆盖了块内的函数声明")]),t._v(" "),a("li",[t._v("到函数声明的位置时，会给块外的变量a赋值，但此时块内的 a 已经是5，所以块外的5赋值为5")]),t._v(" "),a("li",[t._v("a = 0，给块内的 a 重新赋值")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a¹"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a²")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明提升")]),t._v("\n  a² "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  a¹ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a²"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在原来a函数声明的位置，存在给外部a赋值的操作")]),t._v("\n  a² "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a²"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a¹"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("ES5以及ES6中对执行上下文做了更改：")]),t._v(" "),a("blockquote",[a("p",[t._v("最新的JS执行上下文"),a("a",{attrs:{href:"https://www.cxymsg.com/guide/mechanism.html#javascript%E7%9A%84%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript的运行机制"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("或者这一篇"),a("a",{attrs:{href:"https://juejin.im/post/5ba32171f265da0ab719a6d7",target:"_blank",rel:"noopener noreferrer"}},[t._v("理解 JavaScript 中的执行上下文和执行栈"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在ES5规范中，环境记录项被简单地分为声明式环境记录项和对象式环境记录项；在ES6中，新增加了一个全局环境记录项")])]),t._v(" "),a("h2",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),a("p",[t._v("当查找变量的时候，会先从当前上下文的变量对象中查找，如果没有找到，就会从父级(词法层面上的父级)执行上下文的变量对象中查找，一直找到全局上下文的变量对象，也就是全局对象。这样由多个执行上下文的变量对象构成的链表就叫做作用域链。")]),t._v(" "),a("p",[t._v("当然ES6以后应该是通过外部词法环境的引用来进行查找。")]),t._v(" "),a("h3",{attrs:{id:"作用域链创建流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链创建流程"}},[t._v("#")]),t._v(" 作用域链创建流程")]),t._v(" "),a("ul",[a("li",[t._v("函数被创建(声明)，保存作用域链(保存父级变量对象)到内部属性 "),a("code",[t._v("[[scopes]]")])]),t._v(" "),a("li",[t._v("执行函数，创建函数执行上下文，函数执行上下文被压入执行上下文栈")]),t._v(" "),a("li",[t._v("函数并不立刻执行，开始做准备工作，第一步：复制函数 "),a("code",[t._v("[[scopes]]")]),t._v("属性创建作用域链")]),t._v(" "),a("li",[t._v("第二步：用 arguments 创建活动对象，随后初始化活动对象，加入形参、函数声明、变量声明")]),t._v(" "),a("li",[t._v("第三步：将活动对象压入函数作用域链顶端")]),t._v(" "),a("li",[t._v("准备工作做完，开始执行函数，随着函数的执行，修改 AO 的属性值")]),t._v(" "),a("li",[t._v("函数执行完毕")])]),t._v(" "),a("p",[t._v("注意：")]),t._v(" "),a("ol",[a("li",[t._v("函数的内部属性 "),a("code",[t._v("[[scopes]]")]),t._v(" 是在函数声明之后就有的，而作用域链中加入它是在函数准备执行上下文时。")]),t._v(" "),a("li",[t._v("引擎不同，在嵌套函数内部函数的作用域链如果没有引用外部函数的任何变量，可能不会加入外部函数的环境引用")])]),t._v(" "),a("h2",{attrs:{id:"从ecmascript规范解读this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从ecmascript规范解读this"}},[t._v("#")]),t._v(" 从ECMAScript规范解读this")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://juejin.im/post/5c1c5bfcf265da614c4cc40e",target:"_blank",rel:"noopener noreferrer"}},[t._v("换个角度看 JavaScript 中的 (this)"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"http://liyangready.github.io/2016/07/31/%E6%A0%B9%E6%B2%BBJavaScript%E4%B8%AD%E7%9A%84this-ECMAScript%E8%A7%84%E8%8C%83%E8%A7%A3%E8%AF%BB/",target:"_blank",rel:"noopener noreferrer"}},[t._v("根治JavaScript中的this-ECMAScript规范解读"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("一个函数上下文中确定this值的通用规则如下：在一个函数上下文中，this由调用者提供，由调用函数的方式来决定。如果调用括号()的左边是引用类型的值，this将设为引用类型值的base对象（base object），在其他情况下（与引用类型不同的任何其它属性），这个值为null。不过，实际不存在this的值为null的情况，因为当this的值为null的时候，其值会被隐式转换为全局对象。注：第5版的ECMAScript中，已经不强迫转换成全局变量了，而是赋值为undefined。")]),t._v(" "),a("p",[t._v("基本上，在调用一个函数的时候最主要还是看()左边的到底是什么，然后再查看调用时的 EnvironmentRecord ，根据上一节它里面记录了调用环境的所有信息。")]),t._v(" "),a("blockquote",[a("p",[t._v("补充"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"}},[t._v("运算符优先级"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("一个问题")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 打印函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[t._v("立即执行表达式里如果被执行的语句是一个具名的函数表达式，会被作为 Function Object 的 [[Environment]] 内部属性的字段之一。在执行时，函数若是访问该函数名，访问的就是这个函数本身，而不会再向上查找。")]),t._v(" "),a("li",[t._v("或者第二种说法：立即执行表达式如果一个函数定义表达式包含名称，函数的局部作用域将会包含一个绑定到函数对象的名称。实际上，函数的名称将成为函数内部的一个局部变量。")]),t._v(" "),a("li",[t._v("一般情况下，如果出现temp=10；这样的给未声明变量赋值的操作，temp会声明为全局变量。但是如果这样的情况出现在立即表达式中，temp会被声明为局部变量而不是全局变量。")])]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("p",[t._v("ECMAScript中，闭包指的是：")]),t._v(" "),a("ul",[a("li",[t._v("从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量就相当于是在访问自由变量，这个时候使用最外层的作用域。")]),t._v(" "),a("li",[t._v("从实践角度：以下函数才算是闭包：\n"),a("ul",[a("li",[t._v("即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）")]),t._v(" "),a("li",[t._v("在代码中引用了自由变量")])])])]),t._v(" "),a("p",[t._v("主要还是因为函数的执行上下文中维护了外部环境的引用，而这个引用是在函数声明的时候就加入的。")]),t._v(" "),a("h2",{attrs:{id:"参数按值传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参数按值传递"}},[t._v("#")]),t._v(" 参数按值传递")]),t._v(" "),a("p",[t._v("ECMAScript中所有函数的参数都是按值传递的。参数传递分为值传递、引用传递，这里为啥说都是值传递呢，因为就算传递对象数组这种引用类型，也只是把对应的"),a("strong",[t._v("地址")]),t._v("拷贝一份传递给形参。")]),t._v(" "),a("h2",{attrs:{id:"call-apply模拟实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call-apply模拟实现"}},[t._v("#")]),t._v(" call,apply模拟实现")]),t._v(" "),a("p",[t._v("看实现yyy.md")]),t._v(" "),a("h2",{attrs:{id:"new的模拟实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new的模拟实现"}},[t._v("#")]),t._v(" new的模拟实现")]),t._v(" "),a("p",[t._v("看实现yyy.md")]),t._v(" "),a("p",[t._v("注意：Object.create(null) 是创建一个没有任何属性的空对象，所以不能用在这里")]),t._v(" "),a("h2",{attrs:{id:"类数组对象与arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类数组对象与arguments"}},[t._v("#")]),t._v(" 类数组对象与arguments")]),t._v(" "),a("ul",[a("li",[t._v("拥有一个 length 属性和若干索引属性的对象")]),t._v(" "),a("li",[t._v("拥有与数组类似的行为，可以通过数字下标读取属性，可以遍历，但是没有数组的方法")]),t._v(" "),a("li",[t._v("可以通过slice, splice, Array.from, contat 等方式将类数组转换为数组，一些length只读的类数组，splice不能转换")]),t._v(" "),a("li",[t._v("Arguments对象也是一个类数组，它只存在于函数体中，包括了函数的参数（实参）以及其他属性\n"),a("ul",[a("li",[t._v("length可以访问实参的个数（不是形参个数）")]),t._v(" "),a("li",[t._v("callee表示函数本身，可以通过它递归调用")]),t._v(" "),a("li",[t._v("以及Symbol(Symbol.iterator)表示可迭代")]),t._v(" "),a("li",[t._v("传入的实参(非严格模式)和 arguments 的值会共享")]),t._v(" "),a("li",[t._v("最好不要去操作arguments，比如把它return出去")]),t._v(" "),a("li",[t._v("箭头函数没有arguments")])])])]),t._v(" "),a("h2",{attrs:{id:"创建对象的多种方式以及优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象的多种方式以及优缺点"}},[t._v("#")]),t._v(" 创建对象的多种方式以及优缺点")]),t._v(" "),a("ol",[a("li",[t._v("工厂模式，通过new Object出的实例来扩展属性，调用时不适用new,创建的对象无法识别。")]),t._v(" "),a("li",[t._v("构造函数模式，如果实例中有函数，那么每次创建实例都会新创建一次其中函数")]),t._v(" "),a("li",[t._v("原型模式，所有的属性都存放于原型之上，属性共享且无法传递初始化参数")]),t._v(" "),a("li",[t._v("组合模式，共享属性放至原型，私有属性通过构造函数设置\n4.1 动态组合模式，将设置原型共有属性逻辑，放至构造函数内，如果有没有该属性，向原型设置，否则不处理，注意这时不能用对象字面量去覆盖原型")]),t._v(" "),a("li",[t._v("寄生构造模式，其实就是工厂模式通过 new 来调用。\n5.1 稳妥构造函数模式，其中不引用this，不过创建的对象也不能识别")])]),t._v(" "),a("h2",{attrs:{id:"继承的多种方式和优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承的多种方式和优缺点"}},[t._v("#")]),t._v(" 继承的多种方式和优缺点")]),t._v(" "),a("ol",[a("li",[t._v("原型链继承，将子级的原型设置为父级的实例对象。缺点就是父级中的引用类型会被子级共享，并且无法像父级构造函数传参。这种情况其实子级构造函数已经没有了自己的原型")]),t._v(" "),a("li",[t._v("经典继承（借用构造函数），在子级中通过apply调用父级构造函数，Parent.call(this)，因为是传递的子级实例this,来解决原型链继承存在共享等问题，缺点就是方法都定义在构造函数中，每创建一次实例都会创建一次方法，而且无法访问到父级原型上的属性")]),t._v(" "),a("li",[t._v("组合继承，在经典继承的基础上，将共享方法移至原型上，同时要将子级原型对象设置为父级实例，原型对象的构造属性再指回子级构造函数，缺点是会调用两次父级构造函数，一次设置原型对象，一次新建实例")]),t._v(" "),a("li",[t._v("原型式继承，与原型链继承类似，只不过它是直接将一个对象作为子级的原型对象，也存在共享问题")]),t._v(" "),a("li",[t._v("寄生式继承，创建一个封装继承过程的函数，然后再函数内来增强对象")]),t._v(" "),a("li",[t._v("寄生组合式继承，为了解决组合继承父级构造方法调用两次的问题，引入一个中间构造函数，将其原型设置为父级原型对象，再将子级原型对象设置为中间构造函数的实例。")])]),t._v(" "),a("p",[t._v("几个问题：")]),t._v(" "),a("ul",[a("li",[t._v("Child.prototype = Object.create(Parent.prototype);和 Child.prototype = new Parent(); 都可以用来继承，但是后者会继承Parent构造函数中的属性，同时也会导致父级构造函数调用两次，产生额外属性")]),t._v(" "),a("li",[t._v("有关JS执行文章"),a("a",{attrs:{href:"https://juejin.im/post/5a6547d0f265da3e283a1df7",target:"_blank",rel:"noopener noreferrer"}},[t._v("从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"https://juejin.im/post/59e85eebf265da430d571f89",target:"_blank",rel:"noopener noreferrer"}},[t._v("这一次，彻底弄懂 JavaScript 执行机制"),a("OutboundLink")],1)]),t._v(" "),a("li",[t._v("关于数组的继承，上面几种方法都不能完美实现。可以参考文章"),a("a",{attrs:{href:"https://github.com/wengjq/Blog/issues/22",target:"_blank",rel:"noopener noreferrer"}},[t._v("为什么 es5 不能完美继承数组"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"浮点数精度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浮点数精度"}},[t._v("#")]),t._v(" 浮点数精度")]),t._v(" "),a("p",[t._v("关于 0.1 + 0.2 != 0.3")]),t._v(" "),a("p",[t._v("ECMAScript 中的 Number 类型使用 IEEE754 标准来表示整数和浮点数值，浮点数值采用的就是"),a("strong",[t._v("双精确度")]),t._v("。")]),t._v(" "),a("p",[t._v("浮点数转二进制，小数部分不断乘以2，每乘一次取整数位作为小数二进制的对应位，十分位，百分位往后推。")]),t._v(" "),a("p",[t._v("而浮点数的存储采用： "),a("code",[t._v("Value = sign * exponent * fraction")]),t._v(" 这种方式，sign 标志位，exponent 指数位，fraction 分数位")]),t._v(" "),a("p",[t._v("举个例子，就拿 0.1 来看，对应二进制是 "),a("code",[t._v("1 * 1.1001100110011…… * 2^-4")]),t._v("， Sign 是 0，E + bias 是 -4 + 1023 = 1019，1019 用二进制表示是 1111111011，Fraction 是 1001100110011……，所以它在存储的时候已经发生了精度丢失，在运算经过 对阶、尾数运算、规格化、舍入处理、溢出判断 之后肯定也是丢失精度的")]),t._v(" "),a("ul",[a("li",[t._v("以指定的精度返回该数值对象的字符串表示可以使用 toPrecision 方法")]),t._v(" "),a("li",[t._v("二进制转十进制 parseInt(1100100,2)")]),t._v(" "),a("li",[t._v("十进制转二进制 parseFloat(0.1).toString(2)")])]),t._v(" "),a("h2",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),a("p",[t._v("配合这两篇文章"),a("a",{attrs:{href:"https://juejin.im/post/5e7f8314e51d4546fa4511c9",target:"_blank",rel:"noopener noreferrer"}},[t._v("从206个console.log()完全弄懂数据类型转换的前世今生(上)"),a("OutboundLink")],1),t._v("，"),a("a",{attrs:{href:"https://juejin.im/post/5e86e73e518825739e0704b4",target:"_blank",rel:"noopener noreferrer"}},[t._v("从206个console.log()完全弄懂数据类型转换的前世今生(下)"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);